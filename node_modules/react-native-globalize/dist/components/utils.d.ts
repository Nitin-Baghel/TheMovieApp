/*!
 * React Native Globalize
 *
 * Copyright 2015-2020 Josh Swan
 * Released under the MIT license
 * https://github.com/joshswan/react-native-globalize/blob/master/LICENSE
 */
import React from 'react';
import { TextProps as RNTextProps } from 'react-native';
import { CurrencyFormatterOptions, DateFormatterOptions, Globalize, NumberFormatterOptions, RelativeTimeFormatterOptions, UnitFormatterOptions, MessageFormatterOptions } from '../globalize';
export declare type TextProps = Pick<RNTextProps, 'accessible' | 'accessibilityLabel' | 'adjustsFontSizeToFit' | 'allowFontScaling' | 'style'>;
export declare const filterTextProps: <T extends RNTextProps>(props: T) => [Omit<T, keyof TextProps>, TextProps];
export declare const createPropFilter: <T extends RNTextProps, P>(fn: (props: Omit<T, keyof TextProps>) => P) => (props: T) => [P, TextProps];
declare type Formatted = {
    formatCurrency: Omit<CurrencyFormatterOptions, 'style'> & {
        currency?: string;
        numberStyle?: CurrencyFormatterOptions['style'];
        value: Parameters<Globalize['formatCurrency']>[0];
    };
    formatDate: DateFormatterOptions & {
        value: Parameters<Globalize['formatDate']>[0];
    };
    formatMessage: MessageFormatterOptions & {
        id: Parameters<Globalize['formatMessage']>[0];
        values?: Parameters<Globalize['formatMessage']>[1];
        [value: string]: any;
    };
    formatNumber: Omit<NumberFormatterOptions, 'style'> & {
        numberStyle?: NumberFormatterOptions['style'];
        value: Parameters<Globalize['formatNumber']>[0];
    };
    formatRelativeTime: RelativeTimeFormatterOptions & {
        unit: Parameters<Globalize['formatRelativeTime']>[1];
        value: Date | number;
    };
    formatUnit: UnitFormatterOptions & {
        unit: Parameters<Globalize['formatUnit']>[1];
        value: Parameters<Globalize['formatUnit']>[0];
    };
};
export declare function createFormattedComponent<Name extends keyof Formatted>(name: Name): React.FC<Formatted[Name] & TextProps>;
export {};
