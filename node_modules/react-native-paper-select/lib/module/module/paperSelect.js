function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { memo, useRef, useState } from 'react';
import { View, StyleSheet, TouchableOpacity, Dimensions, FlatList } from 'react-native';
import { TextInput, Button, Dialog, Portal, Searchbar, ThemeProvider, useTheme, Text } from 'react-native-paper';
import CheckboxInput from '../components/checkBox';

const PaperSelect = ({
  // Required props
  label,
  arrayList,
  selectedArrayList,
  multiEnable,
  value,
  onSelection,
  // Core props
  disabled = false,
  hideSearchBox = false,
  selectAllEnable = true,
  textInputMode = 'flat',
  theme: themeOverrides,
  inputRef,
  // Localization props
  dialogTitle,
  selectAllText = 'Select all',
  searchText = 'Search',
  dialogCloseButtonText = 'Close',
  dialogDoneButtonText = 'Done',
  errorText,
  // Style props
  containerStyle,
  textInputStyle,
  textInputOutlineStyle,
  dialogStyle,
  dialogTitleStyle,
  searchStyle,
  dialogCloseButtonStyle,
  dialogDoneButtonStyle,
  errorStyle,
  textColor,
  // Component props
  textInputProps: textInputPropOverrides,
  checkboxProps: checkboxPropsOverrides,
  searchbarProps: searchbarPropsOverrides
}) => {
  var _textInputPropOverrid;

  const theme = useTheme(themeOverrides);
  const textInputProps = {
    underlineColor: (textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.underlineColor) || 'black',
    activeUnderlineColor: (textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.activeUnderlineColor) || 'black',
    outlineColor: (textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.outlineColor) || 'black',
    activeOutlineColor: (textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.activeOutlineColor) || 'black',
    left: textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.left,
    right: (_textInputPropOverrid = textInputPropOverrides === null || textInputPropOverrides === void 0 ? void 0 : textInputPropOverrides.right) !== null && _textInputPropOverrid !== void 0 ? _textInputPropOverrid : /*#__PURE__*/React.createElement(TextInput.Icon, {
      style: styles.textInputIcon,
      size: 20,
      icon: "chevron-down"
    })
  };
  const {
    height
  } = Dimensions.get('window'); // console.log(height);

  const [searchKey, setSearchKey] = useState('');
  const [arrayHolder, setArrayHolder] = useState([...arrayList]);
  const [list, setList] = useState([...arrayList]);
  const [selectedList, setSelectedList] = useState([...selectedArrayList]);
  const selfInputRef = useRef(null);
  const selectInputRef = inputRef !== null && inputRef !== void 0 ? inputRef : selfInputRef;
  const [visible, setVisible] = useState(false);

  const showDialog = () => setVisible(true);

  const _hideDialog = () => {
    setSearchKey('');
    var data = [...arrayHolder]; // console.log(selectedList);

    var selectedData = [...selectedList]; // console.log(selectedData);

    let finalText = '';
    selectedData.forEach((val, index) => {
      data.forEach(el => {
        if (val._id === el._id) {
          finalText += index !== selectedData.length - 1 ? `${el.value}, ` : `${el.value}`;
        }
      });
    });
    onSelection({
      text: finalText,
      selectedList: selectedData
    });
    setVisible(false);

    if (selectInputRef && selectInputRef.current) {
      selectInputRef.current.blur();
    }
  };

  const _closeDialog = () => {
    setVisible(false);
    setSearchKey('');

    if (selectInputRef && selectInputRef.current) {
      selectInputRef.current.blur();
    }
  };

  const _onFocus = () => {
    setArrayHolder([...arrayList]);
    setList([...arrayList]);
    setSelectedList([...selectedArrayList]);
    showDialog();
  };

  const _onChecked = item => {
    var selectedData = [...selectedList]; // const index = data.findIndex(x => x._id === item._id);

    const indexSelected = selectedData.findIndex(val => val._id === item._id);

    if (indexSelected > -1) {
      selectedData.splice(indexSelected, 1);
    } else {
      selectedData.push(item);
    }

    setSelectedList([...selectedData]);
  };

  const _onCheckedSingle = item => {
    var selectedData = [...selectedList]; // const index = data.findIndex(x => x._id === item._id);

    const indexSelected = selectedData.findIndex(val => val._id === item._id);

    if (indexSelected > -1) {
      // selectedData.splice(indexSelected, 1);
      selectedData = [];
    } else {
      selectedData = [];
      selectedData.push(item);
    } // console.log(selectedData);


    setSelectedList([...selectedData]);
  };

  const _exists = item => {
    // console.log(selectedList);
    let _temp = [...selectedList];
    return _temp.find(val => val._id === item._id) ? true : false;
  };

  const _isCheckedAll = () => {
    const data = [...list];
    const selectedData = [...selectedList];
    return selectedData.length !== 0 && selectedData.length === data.length;
  };

  const _checkAll = () => {
    const data = [...list];
    var selectedData = [...selectedList];

    if (selectedData.length === data.length) {
      selectedData = [];
    } else if (selectedData.length === 0 || selectedData.length > 0) {
      selectedData = data.slice(0);
    }

    setSelectedList([...selectedData]);
  }; // const _renderListForMulti = () => {
  //   return list.map((item, key) => {
  //     return (
  //       <TouchableOpacity
  //         style={styles.touchableItem}
  //         key={key}
  //         onPress={() => {
  //           _onChecked(item);
  //         }}
  //       >
  //         <CheckboxInput
  //           {...checkboxPropsOverrides}
  //           isChecked={_exists(item)}
  //           label={item.value}
  //         />
  //       </TouchableOpacity>
  //     );
  //   });
  // };


  const _renderItem = ({
    item
  }) => /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: styles.touchableItem,
    onPress: () => multiEnable === true ? _onChecked(item) : _onCheckedSingle(item)
  }, /*#__PURE__*/React.createElement(CheckboxInput, _extends({}, checkboxPropsOverrides, {
    isChecked: _exists(item),
    label: item.value
  }))); // const _renderListForSingle = () => {
  //   return list.map((item, key) => {
  //     return (
  //       <TouchableOpacity
  //         style={styles.touchableItem}
  //         key={key}
  //         onPress={() => {
  //           _onCheckedSingle(item);
  //         }}
  //       >
  //         <CheckboxInput
  //           {...checkboxPropsOverrides}
  //           isChecked={_exists(item)}
  //           label={item.value}
  //         />
  //       </TouchableOpacity>
  //     );
  //   });
  // };


  const _filterFunction = text => {
    setSearchKey(text);
    const newData = arrayHolder.filter(item => item.value.toLowerCase().includes(text.toLowerCase()));
    setList(newData);
  };

  return /*#__PURE__*/React.createElement(ThemeProvider, {
    theme: theme
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.container, containerStyle]
  }, /*#__PURE__*/React.createElement(TextInput, _extends({}, textInputProps, {
    ref: selectInputRef,
    disabled: disabled,
    style: [styles.textInput, textInputStyle],
    outlineStyle: textInputOutlineStyle,
    label: label,
    mode: textInputMode,
    onFocus: disabled ? undefined : _onFocus,
    showSoftInputOnFocus: false,
    value: value,
    textColor: textColor
  })), errorText ? /*#__PURE__*/React.createElement(Text, {
    style: [{
      color: theme.colors.error
    }, errorStyle]
  }, errorText) : null), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Dialog, {
    style: [styles.dialog, dialogStyle],
    visible: visible,
    dismissable: false
  }, /*#__PURE__*/React.createElement(Dialog.Title, {
    style: dialogTitleStyle
  }, dialogTitle !== null && dialogTitle !== void 0 ? dialogTitle : label), /*#__PURE__*/React.createElement(Dialog.ScrollArea, {
    style: {
      paddingHorizontal: 14
    }
  }, !hideSearchBox ? /*#__PURE__*/React.createElement(Searchbar, _extends({}, searchbarPropsOverrides, {
    value: searchKey,
    placeholder: searchText,
    onChangeText: text => _filterFunction(text),
    style: [styles.searchbar, searchStyle]
  })) : null, multiEnable === true && selectAllEnable === true ? /*#__PURE__*/React.createElement(TouchableOpacity, {
    style: styles.touchableItem,
    onPress: () => {
      _checkAll();
    }
  }, /*#__PURE__*/React.createElement(CheckboxInput, _extends({}, checkboxPropsOverrides, {
    isChecked: _isCheckedAll(),
    label: selectAllText
  }))) : null, /*#__PURE__*/React.createElement(FlatList, {
    data: list,
    renderItem: _renderItem,
    keyExtractor: item => item._id.toString(),
    keyboardShouldPersistTaps: "handled",
    style: (styles.dialogScrollView, {
      maxHeight: height - height * 40 / 100,
      marginBottom: 8
    })
  })), /*#__PURE__*/React.createElement(Dialog.Actions, null, /*#__PURE__*/React.createElement(Button, {
    labelStyle: dialogCloseButtonStyle,
    onPress: _closeDialog
  }, dialogCloseButtonText), /*#__PURE__*/React.createElement(Button, {
    labelStyle: dialogDoneButtonStyle,
    onPress: _hideDialog
  }, dialogDoneButtonText))))));
};

const styles = StyleSheet.create({
  container: {
    width: '100%',
    marginBottom: 10
  },
  dialog: {
    backgroundColor: 'white',
    borderRadius: 5
  },
  dialogScrollView: {
    width: '100%'
  },
  touchableItem: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  textInput: {// backgroundColor: '#fff',
    // color: '#000',
  },
  textInputIcon: {
    justifyContent: 'center',
    alignItems: 'center',
    alignSelf: 'center',
    alignContent: 'center'
  },
  searchbar: {
    borderColor: '#777777',
    backgroundColor: '#F1F1F2',
    borderWidth: 0.25,
    marginBottom: 10,
    marginHorizontal: 8,
    color: '#000',
    marginTop: 12
  }
});
export default /*#__PURE__*/memo(PaperSelect);
//# sourceMappingURL=paperSelect.js.map